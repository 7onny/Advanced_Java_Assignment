package main;

import dataStructures.*;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * JPanel derived class implementing the main panel to be embedded into the Applet. <p>
 * @author Juan R. Da Costa Martinez
 */
public class MainPanel extends javax.swing.JPanel {
    //-------Data Structures--------
    /**
     * Original matrix A in the matrix system A*x=b.
     */
    static Matrix A=null;
    /**
     * Lower triangular matrix in the LU factorization.
     */
    static Matrix L=null;
    /**
     * Upper triangular matrix in the LU factorization.
     */
    static Matrix U=null;
    /**
     * Pivoting matrix: PA=bA.
     */
    static Matrix P=null;
    /**
     * Inverse matrix.
     */
    static Matrix I=null;
    /**
     * Right-hand side vector.
     */
    static Vector b=null;
    /**
     * Pivot vector.
     */
    static Vector piv=null;
    /**
     * Solution vector.
     */
    static Vector res=null;
    /**
     * Dimension parameter N (i.e. A is NxN and B is Nx1).
     */
    int N;
    //------End of Data Structures-------
    
    /**
     * Creates new form MainPanel
     */
    public MainPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        A_ScrollPane = new javax.swing.JScrollPane();
        A_TextArea = new javax.swing.JTextArea();
        b_ScrollPane = new javax.swing.JScrollPane();
        b_TextArea = new javax.swing.JTextArea();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        LU_Button = new javax.swing.JButton();
        PIVOT_Button = new javax.swing.JButton();
        Inv_Button = new javax.swing.JButton();
        Clear_Button = new javax.swing.JButton();
        Result_ScrollPane = new javax.swing.JScrollPane();
        Result_TextArea = new javax.swing.JTextArea();

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Matrix System A*x=b");

        jLabel2.setText("Enter matrix A:");

        jLabel3.setText("Enter vector b:");

        A_TextArea.setColumns(20);
        A_TextArea.setRows(5);
        A_TextArea.setText("2 -1 3\n4 2 1\n-6 -1 2");
        A_ScrollPane.setViewportView(A_TextArea);

        b_TextArea.setColumns(20);
        b_TextArea.setRows(5);
        b_TextArea.setText("1 2 3");
        b_ScrollPane.setViewportView(b_TextArea);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("Results");

        LU_Button.setText("LU");
        LU_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LU_ButtonActionPerformed(evt);
            }
        });

        PIVOT_Button.setText("LU Pivot");
        PIVOT_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PIVOT_ButtonActionPerformed(evt);
            }
        });

        Inv_Button.setText("Inverse");
        Inv_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Inv_ButtonActionPerformed(evt);
            }
        });

        Clear_Button.setText("Clear");
        Clear_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Clear_ButtonActionPerformed(evt);
            }
        });

        Result_TextArea.setColumns(20);
        Result_TextArea.setRows(5);
        Result_ScrollPane.setViewportView(Result_TextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addContainerGap()
                                    .addComponent(jSeparator1))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(210, 210, 210)
                                        .addComponent(jLabel1))
                                    .addGroup(layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel2)
                                            .addComponent(A_ScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(32, 32, 32)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel3)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(LU_Button)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(PIVOT_Button)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(Inv_Button)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(Clear_Button))
                                            .addComponent(b_ScrollPane)))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(249, 249, 249)
                                .addComponent(jLabel4)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(Result_ScrollPane)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(A_ScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(b_ScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(LU_Button)
                            .addComponent(PIVOT_Button)
                            .addComponent(Inv_Button)
                            .addComponent(Clear_Button))))
                .addGap(30, 30, 30)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Result_ScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
/**
 * Handler method for the LU button.
 * @param evt Event of clicking button
 */
    private void LU_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LU_ButtonActionPerformed
        // TODO add your handling code here:
        String matrixA=A_TextArea.getText();
        String vectorb=b_TextArea.getText();
        try{
            A=new Matrix(matrixA);
            b=new Vector(vectorb);
            if(A.size()!=b.size()){
                System.err.println("Incompatible dimensions");
                Result_TextArea.setText("Incompatible dimensions");
            }
            else{   //Correct dimensions
                N=A.size();
                L=new Matrix(N);
                U=new Matrix(N);
                try{
                    A.LU(L, U);
                } catch(Exception e){
                    Result_TextArea.setText(e.getMessage());
                    return;
                }
                double det=L.LUDeterminant()*U.LUDeterminant();
                res=A.solve(L, U, b);
                String result="LU Decomposition without pivoting\nOriginal matrix A:\n";
                result+=A.toString();
                result+="\nOriginal vector b:\n";
                result+=b.toString();
                result+="\nLower matrix L:\n";
                result+=L.toString();
                result+="\nUpper matrix U:\n";
                result+=U.toString();
                result+="\nSolution:\n";
                result+=res.toString();
                result+="\nDeterminant of matrix A:\n";
                result+=det;
                Result_TextArea.setText(result);

            }


        } catch(Exception e){
            Result_TextArea.setText(A.toString()+"\n"+b.toString()+"\nError: "+e.getMessage());
        }
        

    }//GEN-LAST:event_LU_ButtonActionPerformed
/**
 * Handler method for the Clear button.
 * @param evt Event of clicking button
 */
    private void Clear_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Clear_ButtonActionPerformed
        // TODO add your handling code here:
        A_TextArea.setText("");
        b_TextArea.setText("");
        Result_TextArea.setText("");
    }//GEN-LAST:event_Clear_ButtonActionPerformed
/**
 * Handler method for the LU_PIVOT button.
 * @param evt Event of clicking button
 */
    private void PIVOT_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PIVOT_ButtonActionPerformed
        // TODO add your handling code here:
        String matrixA=A_TextArea.getText();
        String vectorb=b_TextArea.getText();
        try{
            A=new Matrix(matrixA);
            b=new Vector(vectorb);
            if(A.size()!=b.size()){
                System.err.println("Incompatible dimensions");
                Result_TextArea.setText("Incompatible dimensions");
            }
            else{   //Correct dimensions
                N=A.size();
                L=new Matrix(N);
                U=new Matrix(N);
                double det=A.determinant(A.getMatrix());
                piv=new Vector(N);
                P=A.reorder(piv);
                //Premultiply A and b by P
                A=P.mult(A);
                b=b.mult(P);
                try{
                    A.LU(L, U);
                } catch(Exception e){
                    Result_TextArea.setText(e.getMessage());
                    return;
                }
                //double det=L.Determinant()*U.Determinant();
                res=A.solve(L, U, b);
                String result="LU Decomposition without pivoting\nOriginal matrix A:\n";
                result+=A.toString();
                result+="\nOriginal vector b:\n";
                result+=b.toString();
                result+="\nLower matrix L:\n";
                result+=L.toString();
                result+="\nUpper matrix U:\n";
                result+=U.toString();
                result+="\nSolution:\n";
                result+=res.toString();
                result+="\nDeterminant of matrix A:\n";
                result+=det;
                result+="\n\nPivot vector:\n";
                result+=piv.toStringAsInt();
                Result_TextArea.setText(result);

            }


        } catch(Exception e){
            Result_TextArea.setText(A.toString()+"\n"+b.toString()+"\nError: "+e.getMessage());
        }
        
    }//GEN-LAST:event_PIVOT_ButtonActionPerformed
/**
 * Handler method for the Inverse button.
 * @param evt Event of clicking button
 */
    private void Inv_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Inv_ButtonActionPerformed
        // TODO add your handling code here:
        String matrixA=A_TextArea.getText();
        String vectorb=b_TextArea.getText();
        try{
            A=new Matrix(matrixA);
            b=new Vector(vectorb);
            if(A.size()!=b.size()){
                System.err.println("Incompatible dimensions");
                Result_TextArea.setText("Incompatible dimensions");
            }
            else{   //Correct dimensions
                N=A.size();
                L=new Matrix(N);
                U=new Matrix(N);
                double det=A.determinant(A.getMatrix());
                piv=new Vector(N);
                P=A.reorder(piv);
                I=A.Invert();
                //Premultiply A and b by P
                A=P.mult(A);
                b=b.mult(P);
                try{
                    A.LU(L, U);
                } catch(Exception e){
                    Result_TextArea.setText(e.getMessage());
                    return;
                }
                //double det=L.Determinant()*U.Determinant();
                String result="LU Decomposition without pivoting\nOriginal matrix A:\n";
                result+=A.toString();
                result+="\nOriginal vector b:\n";
                result+=b.toString();
                result+="\nLower matrix L:\n";
                result+=L.toString();
                result+="\nUpper matrix U:\n";
                result+=U.toString();
                result+="\nInverse matrix:\n";
                result+=I.toString();
                result+="\nDeterminant of matrix A:\n";
                result+=det;
                result+="\n\nPivot vector:\n";
                result+=piv.toStringAsInt();
                Result_TextArea.setText(result);

            }


        } catch(Exception e){
            Result_TextArea.setText(A.toString()+"\n"+b.toString()+"\nError: "+e.getMessage());
        }
    }//GEN-LAST:event_Inv_ButtonActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane A_ScrollPane;
    private javax.swing.JTextArea A_TextArea;
    private javax.swing.JButton Clear_Button;
    private javax.swing.JButton Inv_Button;
    private javax.swing.JButton LU_Button;
    private javax.swing.JButton PIVOT_Button;
    private javax.swing.JScrollPane Result_ScrollPane;
    private javax.swing.JTextArea Result_TextArea;
    private javax.swing.JScrollPane b_ScrollPane;
    private javax.swing.JTextArea b_TextArea;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables
}
